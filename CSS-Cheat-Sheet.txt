1. Resetting all browser values to empty. 
All browsers come with pre-defined styling such as margins and paddings. To account for this we can reset all these values to zero using the global selector. The following css code here sets everything to zero:

* {
  margin: 0;
  padding: 0;
  /* Changes the box model so that the paddings and borders 
  aren't added to the height or width of the box */
  box-sizing: border-box;
}

* is the global selector and here we set all the margins and paddings on the page to default to 0. We also change the box-sizing to be border-box, this means that the padding and border will not be added to the size of a container

2. Creating custom gradients and understanding the background-image property better
We can use the background-image property to stack images and gradients to create a really unique setup. For example:

background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 133, 0.8)
    ),
    url('../img/hero.jpg');

The following code creates a gradient that travels from our light green color to the dark green color, it starts with light freen from the top left and travels to the bottom right as specified by to right bottom. We can also see that using rgba, we can set an opacity which lets us make this gradient not block background images that follows. We can also see that we also include a background image. The background-image property will show background-images from left (highest priority) to right (lowest priority). The image all the way to the left will be on top of all the images on its right, this is why we set an opacity for our gradient.

Additionally, we can make sure our image doesn't shift/move around via resizing by forcing it to hold a specific position. We can do this with the following property:

background-position: top;

This ensures that our background stays on the top of its container 

We can also use the background-size: cover property to set the background to always be the width of the viewport. This gives the background dynamic re-sizing properties:

background-size: cover;

3. Creating a custom cut-out shape
CSS has a special property called clip-path that allows us to create special shapes. Here is an example:
clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
The polygon clip path takes four parameters: coordinates of top left edge, coordinates of top right edge, coordinates of bottom right edge, and coordinates of bottom left edge as x y values. This allows us to create a polygon and reshape containers. We can additionally use clippy to create custom shapes for us. You can find clippy here:

https://bennettfeely.com/clippy/

4. Positioning
Absolute
Absolute positioning will reposition an item based on the first parent container with a position property of relative. For example:
<div class="parent-container" style="position:relative">
    <div class="child" style="position:absolute; top:10px"> 
    </div>
<div>
The child div will be top pixels from the top of the first relatively positioned parent div aka the parent-container in this case.

IF YOU WANT TO USE ABSOLUTE POSITIONING, SET A PARENT CONTAINER WITH RELATIVE POSITIONING!

.main-container{
  position: relative;
}
.logo-box {
  position: absolute;
  /* top and bottom position are relative to a relatively positoned parent, must set the parent element to have pos relative */
  top: 40px;
  left: 40px;
}

Tricks to center-align elements:

1. With absolute positioning
.text-box {
  /* absolute positioning is relative to its parent */
  position: absolute;
  top: 50%;
  left: 50%;
  /* Transform is relative to the OWN element, it shifts itself 50% of its own height and width */
  transform: translate(-50%, -50%);
}
Using absolute postioning, as long as the parent div of our container is set to position: relative we can use percentages to move our div to the center of that container. The property top: 50% and left: 50% sets the top left corner of our element to be 50% away from the width and height of the parent div. To account for the size of our own element that we're moving. We use the transform: translate(-50%,-50%) property to shift the element back left and up 50% of it's own length and height. This puts our element directly in the center of the parent div.

2. Centering inline elements 
We can additionally just use text-align: center, to center both inline elements and inline-block elements (inline-elements take take up a block). If we want to center a container for example and don't want to change positioning, we can change that container to be inline-block then use text-align center on the parent of that container.

5. Animations
We can create animations using two different methods: keyframes, and pseudoselectors.

1. keyframes
Keyframes are interesting, they allow us to create an animation variable which we can then use in our elements. Keyframe animations are activated generally as the page loads, here is an example:

@keyframes moveInLeft {
  /* Before animation starts */
  /* For browser speed, only use opacity and transform */
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }
  80% {
    transform: translateX(10px);
  }
  /* When animation ends */
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

With keyframes, we can either use the opacity or transform properties. The percentages define which stage of the animation we're in. We can define every portion of the animation in this way. 0% is our start and 100% is our end. By changing opacity from 0 to 1 from 0% to 100%, we create a fadein effect.

To use a keyframe we include it into our element like this:
.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;
  animation: moveInLeft 1s ease-out;
}
The animation property is a shorthand of a plethora of animation properties. Here we just pass in arguments we care about. moveInLeft is our keyframe, 1s is the duration of the animation, and ease-out is a special animation timing function that makes our animation start off slow then ramp up towards the end.

2. Using Pseudoselectors 
To use a pseduo selector, we must "turn on" the animation property on the parent of the pseudo selector; this then makes all changes to other states of that element animated. For example:

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  display: inline-block;
  border-radius: 100px;
  /* Using the transition property on the initial state allows for animations due to tranformation on other states */
  transition: all 0.2s;
  position: relative;
}

Note that link and visited are default states of links, notice that we are turning on animations by defining the transition property. The two things we pass in here are: which animations we want to use (specify all if you aren't sure), and how long it takes to animate. Setting position to relative here again allows us to move around child elements relative to our btn class with absolute positioning. 

Now lets look at other states of our button
.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}
Since we defined the transition property, when we hover over the button class, we will now see a 0.2s animation where the syling of the button adds a box shadow and a translation. The properties we add here make the button look like it has been lifted while clicking the button makes it seem to drop.

The after pseudoselector 
The after psuedoselector creates a special element that lies as a child in the parent element or the pseduo element we select it with, we must, like it's parent element, define all it's styling. This after element is commonly used for animations. 

.btn:after {
  /* Have to specify these for this to show */
  content: '';
  display: inline-block;
  /* This is treated like a copy of the button */
  height: 100%;
  width: 100%;
  border-radius: 100px;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

Here we basically copy the styling of the parent element but give it a negative z index to hide it behind the parent element. We also turn on transition so we can animate this. NOTE, the after pseudoselector needs the content property to be defined, even if you leave an empty string, it must be declared for this to work!

Now to animate this after property, we can either slap on a keyframe or use another pseduoselector. We can chain pseudoselectors by adding colons like so:

.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

Since we turned on the transition property, this will make the pseudo after element expand from our btn element then dissapear gradually as it's opacity is set to zero. Off hover the pseudoelement goes back behind the button.

/////////////////////////////
// PILLARS OF HTML AND CSS //
/////////////////////////////

1. Responsive web design - Making a website that looks beautiful on screens of all sizes

- Fluid layouts
- Media Quqeries
- Responsive images
- Correct Units 
- Desktop first or mobile first 

2. Maintainable and scalable code - Writing code that is clean, easy to understand, and re-useable

- Clean 
- Easy to understand 
- Reusable 
- How to optimize files 
- How to structure HTML 

3. Web performance - Making the website faster and take less space 

- Less HTTP requests 
- Less code 
- Compress code 
- Use a CSS preprocessor like Sass 
- Less images (makes up most of the size of the website)
- Compress images

// How CSS works behind the scenes //

What happens to CSS when we load up a webpage?
Load HTML -> Parse HTML (decodes it line by line) -> Document Object Model (DOM) is built from decoded html 
When HTML is parsed, CSS is loaded and parsed 

CSS parsing -> Resolve conflicting CSS declarations (cascade) -> Process final CSS values (Percentages for example will be parsed into normalized units on devices) 
After parsing, the CSS Object Model (CSSOM)
is developed, it is a tree-like model like the DOM. These two form the render tree which then leads to Website rendering (The visual formmating model). The final website is then rendered. 

Parsing Phase
Cascade and specificity 

Breaking down a css statement
Selector  Declaration block
.my-class{
    property: declared value -> Declaration
}
In the parsing phase, the first step is the cascade.

The cascade is the process of combining different stylesheets and resolving conflicts between different CSS rules and declarations when more than one rule applies to a certain element. 

There are three sources of CSS:
Author declarations are CSS declared by the author, User declaration is when the user changes the CSS in the browser, and Browser declarations (user agent) are CSS declarations made by the browser. 

These three sources are combined to make the final CSS, but what happens when there are multiple declarations for the same property on the same element? CSS cascades these to determine which to use in the following order:
Importance (weight) > specificity > source order 
The cascade starts by giving each css property an importance status based on where it's declared. Here is the hierachy:

1. User !important declarations 
2. Author !important declarations 
3. Author declarations 
4. User declarations
5. Default browser declarations 

This means default browser declarations will always be overwritten. Example:

.button{
    background-color: blue !important;
}
#now .pull-right .button{
    background-color: green;
}

The button here will be blue because both of these are author declarations but the first, less specific declaration has the !important keyword, so it takes precedence over all other author declarations! If we did not put !important here, since the second button declaration is more specific, it would be applied over the blue background. 

If importance is the same, for example: both elements are author selectors, the cascade moves down and calculates the specificity of each selector. This is done in this hiearchy:

1. Inline styles 
2. IDs
3. Classes, pseudo-classes, attribute
4. Elements, pseudo-elements 

Inline, IDs, Classes/pseudo-classes/attributes, Elements/pseudo Elements
(0,0,0,0)
Biggest number takes precedence. Lets look at the following example: 
.button{
    code 
}
nav#nav div.pull-right .button{
    code 
}
a{
    code 
}
#nav a.button:hover{
    code 
}
Lets calculate the specificity of each:
1. The first one has 1 class so it's specificty is 
(0,0,1,0) or 10.
2. The second one has 1 id, 2 elements (div and nav), and two classes (pull-right and .button) so:
(0,1,2,2) or 122.
3. The third one has one element tag, so it's:
(0,0,0,1) or 1.
4. The forth has 1 id, 1 element, and 1 class + 1 pseudo class or:
(0,1,1,2) or 121.

The class with the highest specificity is 2, so it takes precendence over the others!

The winning value is called the cascaded value

What if all of these also had the same specificty, we now move down to source order. The last CSS declaration will overwrite all the declarations before it.

What you should know:
!important has the highest keyword, it should ONLY be used as a last resource. Spamming !important makes code less maintainable!

Inline styles will always have priority over styles in external stylesheets, but we generally never use these 

A selector that contains 1 ID is more specfic than one with 1000 classes 

A selector that contains 1 class is more specific than one with 1000 elements 

The universal selector * has no specificty value, everything you write will overwrite it!

Rely more on specificty than on the order of selector so that if you ever need to re-arrange your code nothing will mess up. 

When you rely on 3rd-party style sheet, always put your author stylesheet last so they can overwrite the third party style sheet if necessary!